<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.winwin.mapper.career.CareerInfoMapper">

    <!-- 진로정보 글 등록하기   -->
    <insert id="careerInfoInsert">
        insert into CAREERINFO (CAREERINFO_NUMBER, CAREERINFO_TITLE, CAREERINFO_CONTENT, USER_NUMBER, MENTOR_NUMBER)
        values (SEQ_CAREERINFO.NEXTVAL, #{careerInfoTitle}, #{careerInfoContent}, #{userNumber}, #{mentorNumber})
    </insert>
    <!--    -->

    <!-- 진로정보 멘토번호 찾기(작성하기 버튼 on / off)  -->
    <select id="selectMentorNumber" resultType="long">
        SELECT mentor_number, m.user_number
        from mentor m join ww_user wu on m.user_number = wu.user_number
        where m.user_number = #{userNumber}
    </select>
    <!--    -->

    <!-- 유저 태그 및 멘토 인증태그 찾기 -->
    <select id="selectUserTag" resultType="categoryVo">
        select sub_name, sb.sub_number
        from sub_category sc join su_bridge sb on sc.sub_number = sb.sub_number
        where user_number = #{userNumber}
    </select>

    <!-- 멘토 인증태그 찾기 -->
    <select id="selectMentorTag" resultType="careerInfoVo">
        SELECT MENTOR_NUMBER , USER_NUMBER , M.SUB_NUMBER,
               SC.SUB_NAME
        FROM MENTOR m JOIN SUB_CATEGORY sc
                           ON M.SUB_NUMBER  = SC.SUB_NUMBER
        WHERE M.USER_NUMBER = #{userNumber}
    </select>
    <!--    -->

    <!-- 진로정보 글 번호로 조회하기 -->
    <select id="careerInfoSelectNumber" resultType="careerInfoVo">
        SELECT C.CAREERINFO_NUMBER , C.CAREERINFO_TITLE , C.CAREERINFO_CONTENT , C.CAREERINFO_DATE , C.CAREERINFO_STATUS , C.CAREERINFO_CNT ,
               C.USER_NUMBER , C.MENTOR_NUMBER ,
               SC.SUB_NAME ,
               WU.USER_NICKNAME ,
               (SELECT COUNT(USER_NUMBER) FROM CAREERINFO_LIKE cl WHERE C.CAREERINFO_NUMBER = CL.CAREERINFO_NUMBER) AS LIKE_CNT ,
               (SELECT COUNT(USER_NUMBER) FROM CAREERINFO_LIKE cl WHERE CL.USER_NUMBER = #{userNumber} AND CL.CAREERINFO_NUMBER = #{careerInfoNumber} ) AS IS_LIKE ,
               UP.PFP_UPLOAD_PATH , UP.PFP_SYSTEM_NAME , UP.PFP_UUID
        FROM CAREERINFO c JOIN MENTOR m
                               ON C.CAREERINFO_NUMBER = #{careerInfoNumber} AND C.MENTOR_NUMBER = M.MENTOR_NUMBER
                          LEFT OUTER JOIN SUB_CATEGORY sc
                               ON M.SUB_NUMBER = SC.SUB_NUMBER
                          LEFT OUTER JOIN WW_USER wu
                               ON C.USER_NUMBER = WU.USER_NUMBER
                          LEFT OUTER JOIN USER_PFP up
                               ON C.USER_NUMBER = UP.USER_NUMBER
    </select>
    <!--    -->

    <!-- 진로정보 글 전체 좋아요순 및 카테고리 별 조회하기 -->
    <select id="selectCareerInfoList" resultType="careerInfoVo">
        select mentor_number, user_number, sub_number,
        USER_NICKNAME, PFP_UPLOAD_PATH, PFP_SYSTEM_NAME, PFP_UUID,
        sub_name, grade_name, careerinfo_number, careerinfo_title, careerinfo_content, careerinfo_cnt,
        NVL(LIKE_CNT, 0) AS LIKE_CNT
        from (
        select ROWNUM RN, mentor_number, user_number, sub_number,
        USER_NICKNAME, PFP_UPLOAD_PATH, PFP_SYSTEM_NAME, PFP_UUID,
        sub_name, grade_name, careerinfo_number, careerinfo_title, careerinfo_content, careerinfo_cnt,
        NVL(LIKE_CNT, 0) AS LIKE_CNT
        from (
        SELECT S1.mentor_number, S1.user_number, S1.sub_number,
        U.USER_NICKNAME,
        PFP_UPLOAD_PATH, PFP_SYSTEM_NAME, PFP_UUID,
        SC.sub_name,
        G.grade_name,
        CI.careerinfo_title, CI.careerinfo_content, CI.careerinfo_cnt, CI.CAREERINFO_NUMBER,
        NVL(J1.LIKE_CNT, 0) LIKE_CNT
        FROM (
        SELECT mentor_number, user_number, sub_number
        FROM MENTOR M
        <if test="tagList != null and tagList.size != 0">
            WHERE SUB_NUMBER IN
            <foreach collection="tagList" index="index" item="tagNumber" open="(" close=")" separator=",">
                #{tagNumber}
            </foreach>
        </if>
        ) S1
        JOIN WW_USER U
        ON S1.user_number = U.USER_NUMBER
        LEFT JOIN USER_PFP UP
        ON S1.user_number = UP.USER_NUMBER
        JOIN SUB_CATEGORY SC
        ON S1.sub_number = SC.SUB_NUMBER
        JOIN GRADE G
        ON U.USER_GRADE = G.GRADE_NUMBER
        JOIN CAREERINFO CI
        ON S1.user_number = CI.USER_NUMBER
        LEFT JOIN (
        SELECT careerinfo_number, COUNT(user_number) LIKE_CNT
        FROM CAREERINFO_LIKE
        GROUP BY careerinfo_number
        ) J1
        ON J1.careerinfo_number = CI.careerinfo_number
        ORDER BY CI.CAREERINFO_DATE DESC
        )
        <![CDATA[
        where ROWNUM <= #{criteria.page} * #{criteria.amount}
        ]]>
        )
        WHERE RN > (#{criteria.page} - 1) * #{criteria.amount}
    </select>
    <!--    -->

    <!-- 진로정보 페이지 갯수 구하기 -->
    <select id="selectCareerTotal" resultType="_int">
        select COUNT(careerinfo_number) from CAREERINFO
    </select>
    <!--    -->

    <!-- 진로정보 글 상세보기 진입 시 조회수 증가 -->
    <update id="careerInfoReadCnt">
        update CAREERINFO
        set CAREERINFO_CNT = CAREERINFO_CNT + 1
        where CAREERINFO_NUMBER = #{careerInfoNumber}
    </update>

    <!-- 진로정보 글 번호로 수정하기 -->
    <update id="careerInfoUpdate">
        update CAREERINFO
        set CAREERINFO_TITLE = #{careerInfoTitle},
            CAREERINFO_CONTENT = #{careerInfoContent}
        where CAREERINFO_NUMBER = #{careerInfoNumber}
    </update>
    <!--    -->

    <!-- 진로정보 글 번호로 삭제하기 -->
    <delete id="careerInfoDelete">
        delete from CAREERINFO
        where CAREERINFO_NUMBER = #{careerInfoNumber}
    </delete>
    <!--    -->

</mapper>